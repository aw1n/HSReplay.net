# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-10 16:27
from __future__ import unicode_literals

from django.db import migrations

CREATE_INDEX_ON_DECK_SUMMARY_STATS_DECK_ID = """
	CREATE INDEX IF NOT EXISTS deck_summary_stats_deck_idx
	ON deck_summary_stats (deck_id);
"""

DROP_INDEX_ON_DECK_SUMMARY_STATS_DECK_ID = """
	DROP INDEX deck_summary_stats_deck_idx;
"""

CREATE_PRETTY_DECK_LIST_STRING_FUNC = """
	CREATE OR REPLACE FUNCTION pretty_deck_list_string(int8)
	RETURNS text AS $$
	SELECT string_agg(c.name || ' x ' || ci.count, ', ' ORDER BY c.cost)
	FROM cards_include ci
	JOIN card c ON c.id = ci.card_id
	WHERE ci.deck_id = $1;
	$$ LANGUAGE SQL STABLE;
"""

DROP_PRETTY_DECK_LIST_STRING_FUNC = """
	DROP FUNCTION pretty_deck_list_string(int);
"""

CREATE_DECK_DIGEST_FUNC = """
	CREATE OR REPLACE FUNCTION deck_digest(text[]) RETURNS text AS $$
	SELECT md5(convert_to(string_agg(c.id, ',' ORDER BY c.id), 'UTF8'))
	FROM UNNEST($1) c(id);
	$$ LANGUAGE SQL STABLE;
"""

DROP_DECK_DIGEST_FUNC = """
	DROP FUNCTION deck_digest(text[]);
"""

CREATE_GET_OR_CREATE_DECK_FUNC = """
CREATE OR REPLACE FUNCTION get_or_create_deck(text[])
	RETURNS TABLE (deck_id int, deck_creation_ts timestamp, digest text, created boolean) AS $$
	DECLARE
		computed_digest text;
		generated_deck_id int;
		created boolean;
		deck_created_ts timestamp;
	BEGIN
		-- Compute the deck digest
		computed_digest = deck_digest($1);
		SELECT cd.id, cd.created INTO generated_deck_id, deck_created_ts
		FROM cards_deck cd WHERE cd.digest = computed_digest;

		-- First check whether this deck already exists
		IF FOUND THEN
			created = false;
			RETURN QUERY SELECT generated_deck_id, deck_created_ts, computed_digest, created;
			RETURN;
		END IF;

		-- Since the deck does not exist, we must now create it.
		BEGIN
			deck_created_ts = CURRENT_TIMESTAMP;
			INSERT INTO cards_deck (digest, created)
			VALUES (computed_digest, deck_created_ts)
			RETURNING id INTO generated_deck_id;

			INSERT INTO cards_include (deck_id, card_id, count)
			SELECT generated_deck_id AS deck_id, c.id AS card_id, count(*)
			FROM UNNEST($1) c(id)
			GROUP BY c.id;

			created = true;

		EXCEPTION WHEN unique_violation THEN
			-- If an exception is thrown because another thread inserted the deck
			-- Then just query for the deck ID and let the other thread
			-- Remain responsible for building the deck
			SELECT cd.id, cd.created INTO generated_deck_id, deck_created_ts
			FROM cards_deck cd WHERE cd.digest = computed_digest;

			created = false;
		END;

		RETURN QUERY SELECT generated_deck_id, deck_created_ts, computed_digest, created;
		RETURN;
	END;
	$$ LANGUAGE plpgsql;
"""

DROP_GET_OR_CREATE_DECK_FUNC = """
	DROP FUNCTION get_or_create_deck(text[]);
"""


class Migration(migrations.Migration):

	dependencies = [
		('cards', '0003_auto_20161008_1520'),
	]

	operations = [
		migrations.RunSQL(
			CREATE_INDEX_ON_DECK_SUMMARY_STATS_DECK_ID,
			DROP_INDEX_ON_DECK_SUMMARY_STATS_DECK_ID
		),
		migrations.RunSQL(
			CREATE_PRETTY_DECK_LIST_STRING_FUNC,
			DROP_PRETTY_DECK_LIST_STRING_FUNC
		),
		migrations.RunSQL(
			CREATE_DECK_DIGEST_FUNC,
			DROP_DECK_DIGEST_FUNC
		),
		migrations.RunSQL(
			CREATE_GET_OR_CREATE_DECK_FUNC,
			DROP_GET_OR_CREATE_DECK_FUNC
		),
	]
